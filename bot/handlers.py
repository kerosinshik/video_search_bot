from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext, CallbackQueryHandler
from .video_search import search_and_send_videos, is_video_url, get_video_info, format_video_info
from googletrans import Translator
import yt_dlp
import os
import pytz
from datetime import datetime, timedelta
import logging


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

translator = Translator()


def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        ['üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ', 'üì• –°–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'],
        ['üìã –§–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                              reply_markup=reply_markup)


def help_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('–ù–∞–∂–º–∏—Ç–µ "üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ" –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞. '
                              '–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –Ω–∞–∂–º–∏—Ç–µ "üì• –°–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube.')


def search_videos(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("YouTube", callback_data='search_youtube'),
         InlineKeyboardButton("TikTok", callback_data='search_tiktok'),
         InlineKeyboardButton("Instagram", callback_data='search_instagram')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞:', reply_markup=reply_markup)
    context.user_data['expecting'] = 'search_platform'


def handle_search_query(update: Update, context: CallbackContext) -> None:
    query = update.message.text
    platform = context.user_data.get('search_platform', 'youtube')
    update.message.reply_text(f'–ò—â—É –≤–∏–¥–µ–æ –Ω–∞ {platform} –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}')
    search_and_send_videos(update, context, query, platform)

def search_platform(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    platform = query.data.split('_')[1]
    query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ {platform}:")
    context.user_data['search_platform'] = platform
    context.user_data['expecting'] = 'search_query'


def download_video_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:')
    context.user_data['expecting'] = 'video_url'


def handle_text(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    user_data = context.user_data

    if text == 'üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ':
        search_videos(update, context)
    elif text == 'üì• –°–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å':
        update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:')
        user_data['expecting'] = 'video_url'
    elif text == 'üìã –§–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ':
        update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã.')
        user_data['expecting'] = 'video_formats'
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        help_command(update, context)
    elif user_data.get('expecting') == 'search_query':
        handle_search_query(update, context)
    elif user_data.get('expecting') == 'video_url':
        download_and_send_video(update, context)
    elif user_data.get('expecting') == 'video_formats':
        list_available_formats(update, context)
    elif is_video_url(text):  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç URL –≤–∏–¥–µ–æ
        download_and_send_video(update, context)
    else:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.')

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∫—Ä–æ–º–µ —Å–ª—É—á–∞—è –æ–∂–∏–¥–∞–Ω–∏—è URL –≤–∏–¥–µ–æ
    if user_data.get('expecting') != 'video_url':
        user_data['expecting'] = None


def handle_search_query(update: Update, context: CallbackContext) -> None:
    query = update.message.text
    platform = context.user_data.get('search_platform', 'youtube')
    translated_query = translator.translate(query, dest='en').text
    update.message.reply_text(f'–ò—â—É –≤–∏–¥–µ–æ –Ω–∞ {platform} –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}')
    search_and_send_videos(update, context, translated_query, platform)
    context.user_data['expecting'] = None


def download_and_send_video(update: Update, context: CallbackContext) -> None:
    video_url = update.message.text

    if not is_video_url(video_url):
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube.')
        return

    try:
        update.message.reply_text('–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...')
        video_file = download_youtube_video(video_url)

        if video_file and os.path.exists(video_file):
            file_size = os.path.getsize(video_file)
            logger.info(f"Video file size: {file_size} bytes")

            if file_size > 50 * 1024 * 1024:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 50 –ú–ë
                update.message.reply_text('–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 50 –ú–ë.')
            else:
                with open(video_file, 'rb') as file:
                    update.message.reply_video(video=file, supports_streaming=True)
                update.message.reply_text('–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')

            os.remove(video_file)
        else:
            update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.')
    except Exception as e:
        logger.error(f"Error in download_and_send_video: {str(e)}", exc_info=True)
        update.message.reply_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}')

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.user_data['expecting'] = None


def download_youtube_video(video_url):
    try:
        ydl_opts = {
            'format': 'best[ext=mp4]/best',  # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ª—É—á—à–∏–π MP4
            'outtmpl': '%(title)s.%(ext)s',
            'verbose': True
        }
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            try:
                logger.info(f"Attempting to download video: {video_url}")
                info = ydl.extract_info(video_url, download=True)
            except yt_dlp.utils.ExtractorError:
                logger.info("Failed with MP4, trying any format")
                ydl_opts['format'] = 'best'  # –ü—Ä–æ–±—É–µ–º –ª—é–±–æ–π –ª—É—á—à–∏–π —Ñ–æ—Ä–º–∞—Ç
                info = ydl.extract_info(video_url, download=True)

            if info is None:
                logger.error("Failed to extract video info")
                return None

            filename = ydl.prepare_filename(info)
            logger.info(f"Video downloaded: {filename}")
            return filename
    except Exception as e:
        logger.error(f"Error in download_youtube_video: {str(e)}", exc_info=True)
    return None


def list_available_formats(update: Update, context: CallbackContext) -> None:
    if not context.args:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return

    video_url = context.args[0]
    ydl_opts = {'logger': logger}

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(video_url, download=False)
            formats = info.get('formats', [])

            if not formats:
                update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ.")
                return

            format_list = ["–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:"]
            for f in formats:
                format_info = f"ID: {f.get('format_id')} - {f.get('ext')} - {f.get('resolution')} - –≤–∏–¥–µ–æ: {f.get('vcodec')} - –∞—É–¥–∏–æ: {f.get('acodec')}"
                format_list.append(format_info)

            update.message.reply_text("\n".join(format_list[:30]))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 30 —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
    except Exception as e:
        logger.error(f"Error in list_available_formats: {str(e)}", exc_info=True)
        update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {str(e)}")


def help_command(update: Update, context: CallbackContext) -> None:
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /formats <url> - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –≤–∏–¥–µ–æ

    –î–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –Ω–∞–∂–º–∏—Ç–µ "üîç –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ" –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.
    –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –Ω–∞–∂–º–∏—Ç–µ "üì• –°–∫–∞—á–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ YouTube.
    """
    update.message.reply_text(help_text)